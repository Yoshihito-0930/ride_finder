<% content_for :additional_stylesheets do %>
  <%= stylesheet_link_tag "search", media: "all", "data-turbo-track": "reload" %>
<% end %>

<div class="bg-gray-50 menu items-center py-4">
  <!-- マップを表示する要素 -->
  <div id="map" class="w-full h-64 sm:w-1/2 sm:h-96 lg:w-3/4 lg:h-[500px]"></div>
    <h2 class="text-2xl py-4">検索結果</h2>
    <ul id="places">
    </ul>
    <div id="more-container">
      <button id="more-button" class="btn">もっと見る</button>
    </div>
  </div>
</div>

<dialog id="desitination-modal" class="modal">
  <div class="modal-box sm:w-[500px]">
    <form method="dialog">
      <button class="btn btn-sm btn-circle btn-ghost absolute right-2 top-2">✕</button>
    </form>
    <div class="post_show mt-4"></div>
  </div>
</dialog>

<script>
let map;
let currentLocation;
let currentInfoWindow = null;
let mapInitialized = false;

let typeCategory;
let textCategory;
let checkConditionDistance = false;

// nearbySearchでtypeが無いものはtextSearchを使う
switch("<%= @category %>"){
  case "tourist_attraction":
    typeCategory = "<%= @category %>";
    break;
  case "scenic_spot":
    textCategory = "景勝地";
    break;
  case "roadside_station":
    textCategory = "道の駅";
    break;
  case "campground":
    typeCategory = "<%= @category %>";
    break;
  case "viewpoint":
    textCategory = "展望所";
    break;
  case "riders_cafe":
    textCategory = "ライダーズカフェ";
    break;
};

const condition = "<%= @condition %>"
let timeLimit;
let radius;

if (condition === "time") {
  switch ("<%= @condition_value %>") {
    case "60":
      timeLimit = 60;
      radius = 45 * 1000; // 1時間で45km
      break;
    case "45":
      timeLimit = 45;
      radius = 30 * 1000; // 45分で30km
      break;
    case "30":
      timeLimit = 30;
      radius = 15 * 1000; // 30分で15km
      break;
    default:
      radius = 90 * 1000; // 初期値として1時間半で85km
      break;
  }
}else{
  radius = "<%= @condition_value %>" * 1000;
  checkConditionDistance = true;
}

function initMap() {
  if (mapInitialized) {
    return;
  }
  if (navigator.geolocation) {
    navigator.geolocation.getCurrentPosition(
      function(position) {
        currentLocation = {
          lat: position.coords.latitude,
          lng: position.coords.longitude
        };
        map = new google.maps.Map(
          document.getElementById("map"),
          {
            center: currentLocation,
            zoom: 10,
            fullscreenControl: false,
            streetViewControl: false,
            keyboardShortcuts: false,
            mapTypeControl: true,
            mapTypeControlOptions: {
              style: google.maps.MapTypeControlStyle.DROPDOWN_MENU, // ドロップダウン形式に変更
            },
          }
        );
        // 現在地を示す青丸のアイコンを表示
        setCurrentLocationMarker(currentLocation, map);
        console.log("initMap: performNearbySearchを呼び出し");
        performNearbySearch(currentLocation, timeLimit);
      },
      function(error) {
        console.error("Error occurred. Error code: " + error.code);
        const defaultLocation = { lat: 35.6803997, lng: 139.7690174 }; // 東京の緯度経度
        map = new google.maps.Map(
          document.getElementById("map"),
          {
            center: defaultLocation,
            zoom: 10,
          }
        );
        const failedToGetCurrentLocation = false;
        addPlaces(failedToGetCurrentLocation, map);
        mapInitialized = true;
      }
    );
    mapInitialized = true;
  } else { // Geolocation APIをサポートしていないブラウザの処理
  console.log("ブラウザがGeolocation APIに対応しておりませんを追加")
    const defaultLocation = { lat: 35.6803997, lng: 139.7690174 }; //東京の緯度経度
    map = new google.maps.Map(
      document.getElementById("map"),
      {
        center: defaultLocation,
        zoom: 10,
      }
    );
    const getCurrentLocation = false;
    addPlaces(failedToGetCurrentLocation, map);
    mapInitialized = true;
  }
};

// 現在地を示す青丸のアイコン
function setCurrentLocationMarker(currentLocation, map){
  new google.maps.Marker({
      position: currentLocation,
      map: map,
      icon: {
        path: google.maps.SymbolPath.CIRCLE,
        fillColor: '#115EC3',
        fillOpacity: 1,
        strokeColor: 'white',
        strokeWeight: 2,
        scale: 7
      },
  });
}

// textSearch利用時にHPの取得
function getPlaceDetails(placeId, result) {
  const request = {
    placeId: placeId,
    fields: ['website'], // 公式サイトのみ取得
  };

  service.getDetails(request, (place, status) => {
    if (status === google.maps.places.PlacesServiceStatus.OK) {
      if (place.website){
        result.website = place.website;
      }
    } else {
      console.error("Place Details request failed:", status);
    }

    updateUIWithWebsite(result);
  });
};

function performNearbySearch(currentLocation) {
  console.log("performNearbySearch: 呼び出し");
  const service = new google.maps.places.PlacesService(map);
  let getNextPage;
  const moreButton = document.getElementById("more");

  if (moreButton) {
    moreButton.onclick = function () {
      moreButton.disabled = true;
      if (getNextPage) {
        getNextPage();
      }
    };
  }

  let request

  if (typeCategory) {
    request = {
      location: currentLocation,
      radius: radius,
      type: [typeCategory],
      language: 'ja'
    };

    service.nearbySearch(request,
    function (results, status, pagination) {
      if (status !== google.maps.places.PlacesServiceStatus.OK || !results) {
        console.log("nearbySearch止まっている",status)
      return;
      }
      console.log("nearbySearch実行中")
      console.log("NearbySearch Request:", request);

      // nearbySearchで取得できない情報をgetDetailsで取得する
      let detailRequestsCompleted = 0; 
      results.forEach(result => {
      service.getDetails({ placeId: result.place_id, fields: ['formatted_address', 'website', 'opening_hours'] }, (place, status) => {
        if (status === google.maps.places.PlacesServiceStatus.OK) {
          result.formatted_address = place.formatted_address;
          if (place.website){
            result.website = place.website;
          }

          if (place.opening_hours){
            result.opening_hours = place.opening_hours.weekday_text
          }
        } else {
          console.error("Place Details request failed:", status);
        }
        detailRequestsCompleted++;
        if (detailRequestsCompleted === results.length) {
          addPlaces(results, map);
          if (moreButton) {
            moreButton.disabled = !pagination || !pagination.hasNextPage;

            if (pagination && pagination.hasNextPage) {
              getNextPage = function () {
                pagination.nextPage();
              };
            }
          }
          console.log("NearbySearch終了");
        }
      });
    });
    });
  } else if(textCategory){
    request = {
      location: currentLocation,
      radius: radius,
      query: textCategory,
      language: 'ja'
    };
    service.textSearch(request,
      function (results, status, pagination) {
        let filteredResults
        console.log("textSearch開始");
        if (status !== google.maps.places.PlacesServiceStatus.OK || !results) {
          filteredResults = "検索に該当する候補地がありません"
        }else{
          if (textCategory === "道の駅"){
            filteredResults = results.filter(result => {
              return result.name.includes('道の駅') && !result.name.includes('駐車場') && !result.name.includes('ドッグラン')&& !result.name.includes('駐輪場')&& !result.name.includes('トイレ')&& !result.name.includes('レストラン')&& !result.name.includes('食堂')&& !result.name.includes('本店')&& !result.name.includes('案内所');
            });
          }else {
            filteredResults = results;
          }
        }
        addPlaces(filteredResults, map);
        if (moreButton) {
          moreButton.disabled = !pagination || !pagination.hasNextPage;

          if (pagination && pagination.hasNextPage) {
            getNextPage = function () {
              pagination.nextPage();
            };
          }
        }
        console.log("textSearch終了");
      }
    );
  }
  console.log("performNearbySearch: 終了");
}


// 調整中 距離を使ったソート機能
function sortResultsByDistance(results, userLocation) {
  results.sort((a, b) => {
    const distanceA = google.maps.geometry.spherical.computeDistanceBetween(userLocation, a.geometry.location);
    const distanceB = google.maps.geometry.spherical.computeDistanceBetween(userLocation, b.geometry.location);
    return distanceA - distanceB;
  });
  return results;
}


function getRoutes(location, callback) {
  const directionsService = new google.maps.DirectionsService();
  const origin = currentLocation;  // ユーザーの現在地
  const destination = location; //'目的地の住所'

  // 共通のリクエスト
  const baseRequest = {
    origin: origin,
    destination: destination,
    travelMode: 'DRIVING',
    drivingOptions: {
      departureTime: new Date(Date.now() + 5000),  // 現在の時刻だと適切に処理されない可能性があるため現在時刻の5秒後を指定
      trafficModel: 'bestguess'
    }
  };

  // 高速道路を避けるリクエスト(一般道のみ)
  const avoidHighwaysRequest = {
    ...baseRequest,
    avoidHighways: true,
    avoidTolls: true
  };

  // 有料道路を避けるリクエスト(高速無料区間は通る)
  const avoidTollsRequest = {
    ...baseRequest,
    avoidTolls: true
  };

  // 有料、高速道路を回避なしリクエスト
  const noAvoidRequest = {
    ...baseRequest
  };


  const requests = [
    { request: noAvoidRequest, type: 'noAvoid' },
    { request: avoidTollsRequest, type: 'avoidTolls' },
    { request: avoidHighwaysRequest, type: 'avoidHighways' }
  ];

  const promises = requests.map(({ request, type }) =>
    new Promise((resolve, reject) => {
      directionsService.route(request, (response, status) => {
        if (status === 'OK') {
          const route = response.routes[0];
          let duration;
          let durationSeconds;
          if (route.legs[0].duration_in_traffic) {
            duration = route.legs[0].duration_in_traffic.text;
            durationSeconds = route.legs[0].duration.value;
          } else {
            duration = route.legs[0].duration.text;
            durationSeconds = route.legs[0].duration.value;
          }
          const drivingMinutes = Math.ceil(durationSeconds / 60);
          const drivingTime = duration.replace("hours", "時間").replace("mins", "分");
          const textDistance = route.legs[0].distance.text; // 距離をstring型でkmで取得
          const numberDistance = route.legs[0].distance.value; // 距離をメートルで取得
          resolve({ type, drivingTime, textDistance, numberDistance, drivingMinutes });
        } else {
          reject('Directions request failed' + status);
        }
      });
    })
  );

  return Promise.all(promises);
}

// ページ上に候補地を表示
function addPlaces(places, map) {
  const placesList = document.getElementById("places");

  if (Array.isArray(places) && places.length !== 0) {
    places.forEach(place => {
      if (place.geometry && place.geometry.location) {
        const location = place.geometry.location;

        // ルート情報を取得
        getRoutes(location).then(routeInfos => {
          const noAvoidRoute = routeInfos.find(route => route.type === 'noAvoid');
          const drivingMinutes = noAvoidRoute.drivingMinutes;
          const numberDistance = noAvoidRoute.numberDistance;

          if ((timeLimit && drivingMinutes > timeLimit) || 
              (checkConditionDistance && numberDistance > radius)) {
            return;
          }

          // マーカーを地図に表示
          const marker = new google.maps.Marker({
            map, // マーカーを表示する地図オブジェクト
            title: place.name,
            position: location, // マーカーの位置（緯度・経度）
          });
  
          // 情報ウィンドウの作成
          const infoWindow = new google.maps.InfoWindow({
            content: `<strong>${place.name}</strong>`, // マーカーに関連付ける情報
          });
  
          // マーカーがクリックされたときに情報ウィンドウを表示
          marker.addListener("click", function () {
            if (currentInfoWindow) {
              currentInfoWindow.close(); // 以前のウィンドウを閉じる
            }
            infoWindow.open(map, marker);
            currentInfoWindow = infoWindow; // 現在のウィンドウを更新
          });

          const card = document.createElement("div");
          card.className = "card card-compact bg-base-100 shadow-xl my-4 w-112";

          // 画像
          const figure = document.createElement("figure");
          const img = document.createElement("img");
          if (place.photos && place.photos.length > 0) {
            img.src = place.photos[0].getUrl({ maxWidth: 400, maxHeight: 300 });
          } else {
            img.src = "/path/to/no_image.svg"; // 画像がない場合
          }
          img.className = "rounded-xl";
          figure.appendChild(img);
          card.appendChild(figure);

          const cardBody = document.createElement("div");
          cardBody.className = "card-body";

          // スポット名
          const title = document.createElement("h2");
          title.className = "card-title";
          title.textContent = place.name;
          cardBody.appendChild(title);

          // 住所
          if (place.formatted_address) {
            const address = document.createElement("p");
            address.textContent = place.formatted_address.replace("日本、", "");
            cardBody.appendChild(address);
          }

          // 評価
          if (place.rating) {
            const rating = document.createElement("p");
            rating.textContent = `評価☆ ${place.rating} (レビュー件数: ${place.user_ratings_total}件)`;
            cardBody.appendChild(rating);
          }

          if (place.opening_hours){
            const openingHours = document.createElement("P");
            openingHours.textContent = place.opening_hours;
            cardBody.appendChild(openingHours);
          }

          routeInfos.forEach(info => {
            const routeInfo = document.createElement("p");
            let routeTypeLabel = '';
            switch (info.type) {
              case 'noAvoid':
                routeTypeLabel = "有料道路";
                break;
              case 'avoidTolls':
                routeTypeLabel = "有料道路を回避";
                break;
              case 'avoidHighways':
                routeTypeLabel = "下道のみ";
                break;
            }
            routeInfo.textContent = `${routeTypeLabel}: 予想所要時間 ${info.drivingTime} (距離: 約${info.textDistance})`;
            routeInfo.className = "text-sm text-gray-600 mt-2";
            cardBody.appendChild(routeInfo);
          });

          // 詳細リンクボタン
          const detailsButton = document.createElement("button");
          detailsButton.className = "btn";
          detailsButton.textContent = "詳細を見る";
          detailsButton.addEventListener("click", () => {
            const form = document.createElement('form');
            form.method = 'POST';
            form.action = '/destinations';

            // データ送信用hiddenフィールド
            const placeDataInput = document.createElement('input');
            placeDataInput.type = 'hidden';
            placeDataInput.name = 'place_data';
            const placeDataWithImage = {
              ...place,
              photo_url: place.photos && place.photos.length > 0 ? 
                          place.photos[0].getUrl({ maxWidth: 2000, maxHeight: 1600 }) : null
            };
            placeDataInput.value = JSON.stringify(placeDataWithImage);
            form.appendChild(placeDataInput);

            // CSRFトークンを追加
            const csrfToken = document.querySelector('meta[name="csrf-token"]').content;
            const csrfInput = document.createElement('input');
            csrfInput.type = 'hidden';
            csrfInput.name = 'authenticity_token';
            csrfInput.value = csrfToken;
            form.appendChild(csrfInput);

            document.body.appendChild(form);
            form.submit();
          });
          cardBody.appendChild(detailsButton);

          // カードをリストに追加
          card.appendChild(cardBody);
          placesList.appendChild(card);
        }).catch(error => console.error(error));
      }
    });
  } else {
    console.log("addPlaces elseになっている");
    const li = document.createElement("li");
    const message = document.createElement("p");

    if (!places || !Array.isArray(places)) {
      // 現在地が取得できない場合
      console.log("現在地が取得できないため、placesは無効");
      message.textContent = "現在地が取得できませんでした。お使いのブラウザの位置情報の取得を許可してください。";
      li.appendChild(message);

      // 各ブラウザごとの設定方法リンクを追加
      const chromeLink = document.createElement("a");
      chromeLink.href = "https://support.google.com/chrome/answer/142065?hl=ja&co=GENIE.Platform%3DiOS&oco=1";
      chromeLink.target = "_blank";
      chromeLink.textContent = "Google Chromeを使用している方はこちら";
      li.appendChild(chromeLink);

      const safariLink = document.createElement("a");
      safariLink.href = "https://ssl.help.tsite.jp/faq/show/59512?site_domain=qa-tsite";
      safariLink.target = "_blank";
      safariLink.textContent = "Safariを使用している方はこちら";
      li.appendChild(safariLink);

    } else if (places.length === 0) {
      // 検索条件に一致する結果がない場合
      console.log("条件に一致する候補地が見つからない");
      message.textContent = "検索条件に該当する候補地がありません。条件を変更して再検索してください。";
      li.appendChild(message);

    } else {
      // その他の予期しないエラー（補足的に追加）
      console.log("予期しないエラーが発生しました");
      message.textContent = "予期しないエラーが発生しました。もう一度お試しください。";
      li.appendChild(message);
    }
    // リストにメッセージを追加
    placesList.appendChild(li);
  }
}

</script>
<script src="https://maps.googleapis.com/maps/api/js?key=<%= ENV["GOOGLE_MAPS_API_KEY"] %>&loading=async&libraries=places,geometry&callback=initMap" data-turbo-track="reload"></script>
