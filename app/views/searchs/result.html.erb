<% content_for :additional_stylesheets do %>
  <%= stylesheet_link_tag "search", media: "all", "data-turbo-track": "reload" %>
<% end %>

<div class="bg-base-200 menu items-center">
  <!-- マップを表示する要素 -->
  <div id="map" style="height: 400px; width: 700px;"></div>
    <h2 class="text-lg">検索結果</h2>
      <ul id="places">
      </ul>
    </div>
  </div>
</div>

<dialog id="desitination-modal" class="modal">
  <div class="modal-box sm:w-[500px]">
    <form method="dialog">
      <button class="btn btn-sm btn-circle btn-ghost absolute right-2 top-2">✕</button>
    </form>
    <div class="post_show mt-4"></div>
  </div>
</dialog>



<script>
let map;
let currentLocation;
let currentInfoWindow = null;
let mapInitialized = false; //initMap関数が1度だけ実行されるか確認する

let typeCategory
let textCategory
let checkConditionDistance = false;

// nearbySearchでtypeが無いものはtextSearchを使う
switch("<%= @category %>"){
  case "tourist_attraction":
    typeCategory = "<%= @category %>";
    break;
  case "scenic_spot":
    textCategory = "景勝地";
    break;
  case "roadside_station":
    textCategory = "道の駅";
    break;
  case "campground":
    typeCategory = "<%= @category %>";
    break;
  case "viewpoint":
    textCategory = "展望所";
    break;
  case "riders_cafe":
    textCategory = "ライダーズカフェ";
    break;
}

console.log("<%= @category %>")
const condition = "<%= @condition %>"
let timeLimit;
let radius; // timeLimitを使う場合にデフォルト値として使う

// 時間検索の際radiusが大きすぎるとフィルタリングで結果が全然表示されないから調整
if (condition === "time") {
  switch ("<%= @condition_value %>") {
    case "60":
      timeLimit = 60;
      radius = 60 * 1000; // 1時間で55km
      break;
    case "45":
      timeLimit = 45;
      radius = 45 * 1000; // 45分で40km
      break;
    case "30":
      timeLimit = 30;
      radius = 30 * 1000; // 30分で25km
      break;
    default:
      radius = 90 * 1000; // 初期値として1時間半で85km
      break;
  }
}else{
  radius = "<%= @condition_value %>" * 1000;
  checkConditionDistance = true;
}
console.log("<%= @condition_value %>")
console.log(radius)
function initMap() {
  if (mapInitialized) {
    return;
  }
  if (navigator.geolocation) {
    navigator.geolocation.getCurrentPosition(
      function(position) {
        currentLocation = {
          lat: position.coords.latitude,
          lng: position.coords.longitude
        };
        map = new google.maps.Map(
          document.getElementById("map"),
          {
            center: currentLocation,
            zoom: 11,
            fullscreenControl: false,
            streetViewControl: false,
            keyboardShortcuts: false,
            mapTypeControl: true,
          }
        );
        // 現在地を示す青丸のアイコンを表示
        setCurrentLocationMarker(currentLocation, map);
        console.log("initMap: performNearbySearchを呼び出し");
        performNearbySearch(currentLocation, timeLimit);
      },
      function(error) {
        console.error("Error occurred. Error code: " + error.code);
        const defaultLocation = { lat: 35.6803997, lng: 139.7690174 }; // 東京の緯度経度
        map = new google.maps.Map(
          document.getElementById("map"),
          {
            center: defaultLocation,
            zoom: 10,
          }
        );
        const failedToGetCurrentLocation = false;
        addPlaces(failedToGetCurrentLocation, map);
        mapInitialized = true;
      }
    );
    mapInitialized = true;
  } else { // Geolocation APIをサポートしていないブラウザの処理
  console.log("ブラウザがGeolocation APIに対応しておりませんを追加")
    const defaultLocation = { lat: 35.6803997, lng: 139.7690174 }; //東京の緯度経度
    map = new google.maps.Map(
      document.getElementById("map"),
      {
        center: defaultLocation,
        zoom: 10,
      }
    );
    const getCurrentLocation = false;
    addPlaces(failedToGetCurrentLocation, map);
    mapInitialized = true;
  }
}

// 現在地を示す青丸のアイコン
function setCurrentLocationMarker(currentLocation, map){
  new google.maps.Marker({
      position: currentLocation,
      map: map,
      icon: {
        path: google.maps.SymbolPath.CIRCLE,
        fillColor: '#115EC3',
        fillOpacity: 1,
        strokeColor: 'white',
        strokeWeight: 2,
        scale: 7
      },
  });
}

function performNearbySearch(currentLocation) {
  console.log("performNearbySearch: 呼び出し");
  const service = new google.maps.places.PlacesService(map);
  let getNextPage;
  const moreButton = document.getElementById("more");

  if (moreButton) {
    moreButton.onclick = function () {
      moreButton.disabled = true;
      if (getNextPage) {
        getNextPage();
      }
    };
  }

  let request
  
  console.log(condition)
  console.log(timeLimit)
  console.log(typeCategory)
  console.log(textCategory)

  if (typeCategory) {
    request = {
      location: currentLocation,
      radius: radius,
      type: [typeCategory],
      language: 'ja'
    };

    service.nearbySearch(request,
    function (results, status, pagination) {
      if (status !== google.maps.places.PlacesServiceStatus.OK || !results) {
        console.log("ここで止まっている",status)
      return;
      }
      console.log("nearbySearch実行中")
      results.forEach(result => {
        console.log(result.name);
      });
      addPlaces(results, map);
      if (moreButton) {
        moreButton.disabled = !pagination || !pagination.hasNextPage;

        if (pagination && pagination.hasNextPage) {
          getNextPage = function () {
            pagination.nextPage();
          };
        }
      }
      console.log("NearbySearch終了");
    });
  } else if(textCategory){
    request = {
      location: currentLocation,
      radius: radius,
      query: textCategory,
      language: 'ja'
    };
    service.textSearch(request,
      function (results, status, pagination) {
        let filteredResults
        console.log("textSearch開始");
        if (status !== google.maps.places.PlacesServiceStatus.OK || !results) {
          filteredResults = "検索に該当する候補地がありません"
        }else{
          if (textCategory === "道の駅"){
            filteredResults = results.filter(result => {
              return result.name.includes('道の駅') && !result.name.includes('駐車場') && !result.name.includes('ドッグラン')&& !result.name.includes('駐輪場')&& !result.name.includes('トイレ')&& !result.name.includes('レストラン')&& !result.name.includes('食堂')&& !result.name.includes('本店');
            });
          }else {
            filteredResults = results;
          }
        }
        filteredResults.forEach(result => {
          console.log(result.name);
        });
        addPlaces(filteredResults, map);
        if (moreButton) {
          moreButton.disabled = !pagination || !pagination.hasNextPage;

          if (pagination && pagination.hasNextPage) {
            getNextPage = function () {
              pagination.nextPage();
            };
          }
        }
        console.log("textSearch終了");
      }
    );
  }
  console.log("performNearbySearch: 終了");
}


// 調整中 距離を使ったソート機能
function sortResultsByDistance(results, userLocation) {
  results.sort((a, b) => {
    const distanceA = google.maps.geometry.spherical.computeDistanceBetween(userLocation, a.geometry.location);
    const distanceB = google.maps.geometry.spherical.computeDistanceBetween(userLocation, b.geometry.location);
    return distanceA - distanceB;
  });
  return results;
}


function getRoutes(location, callback) {
  const directionsService = new google.maps.DirectionsService();
  const origin = currentLocation;  // ユーザーの現在地
  const destination = location; //'目的地の住所'

  // 共通のリクエスト
  const baseRequest = {
    origin: origin,
    destination: destination,
    travelMode: 'DRIVING',
    drivingOptions: {
      departureTime: new Date(Date.now() + 5000),  // 現在の時刻だと適切に処理されない可能性があるため現在時刻の5秒後を指定
      trafficModel: 'bestguess'
    }
  };

  // 高速道路を避けるリクエスト(一般道のみ)
  const avoidHighwaysRequest = {
    ...baseRequest,
    avoidHighways: true,
    avoidTolls: true
  };

  // 有料道路を避けるリクエスト(高速無料区間は通る)
  const avoidTollsRequest = {
    ...baseRequest,
    avoidTolls: true
  };

  // 有料、高速道路を回避なしリクエスト
  const noAvoidRequest = {
    ...baseRequest
  };


  const requests = [
    { request: noAvoidRequest, type: 'noAvoid' },
    { request: avoidTollsRequest, type: 'avoidTolls' },
    { request: avoidHighwaysRequest, type: 'avoidHighways' }
  ];

  const promises = requests.map(({ request, type }) =>
    new Promise((resolve, reject) => {
      directionsService.route(request, (response, status) => {
        if (status === 'OK') {
          const route = response.routes[0];
          let duration;
          let durationSeconds;
          if (route.legs[0].duration_in_traffic) {
            duration = route.legs[0].duration_in_traffic.text;
            durationSeconds = route.legs[0].duration.value;
          } else {
            duration = route.legs[0].duration.text;
            durationSeconds = route.legs[0].duration.value;
          }
          const drivingMinutes = Math.ceil(durationSeconds / 60);
          const drivingTime = duration.replace("hours", "時間").replace("mins", "分");
          const textDistance = route.legs[0].distance.text; // 距離をstring型でkmで取得
          const numberDistance = route.legs[0].distance.value; // 距離をメートルで取得
          resolve({ type, drivingTime, textDistance, numberDistance, drivingMinutes });
        } else {
          reject('Directions request failed due to ' + status);
        }
      });
    })
  );

  return Promise.all(promises);
}

function addPlaces(places, map) {
  const placesList = document.getElementById("places");
  placesList.innerHTML = ""; // 前の結果をクリア

  if (Array.isArray(places)&& places.length !== 0) {
    places.forEach(place => {
      if (place.geometry && place.geometry.location) {
        const location = place.geometry.location;

        // ルート情報が取得された後に実行するコールバック関数

        getRoutes(location).then(routeInfos => {
          const noAvoidRoute = routeInfos.find(route => route.type === 'noAvoid');
          const drivingMinutes = noAvoidRoute.drivingMinutes;
          const numberDistance = noAvoidRoute.numberDistance;

          console.log(`timeLimitは${timeLimit}で${place.name}のdrivingMinutesは${drivingMinutes}`)

          console.log(checkConditionDistance, `numberDistanceは${numberDistance}でradiusは${radius}`)
          if (timeLimit && drivingMinutes > timeLimit) {
            return;
          }else if(checkConditionDistance && numberDistance > radius){
            return
          }

          const marker = new google.maps.Marker({
            map,
            title: place.name,
            position: location,
          });

          console.log(`${place.name}の緯度経度は${location}`)
          const infoWindow = new google.maps.InfoWindow({
            content: place.name
          });
  
          marker.addListener('click', function() {
            if (currentInfoWindow) {
              currentInfoWindow.close();
            }
            infoWindow.open(map, marker);
            currentInfoWindow = infoWindow;
          });

          const li = document.createElement("li");
          li.textContent = place.name;

          // 画像を表示
          if (place.photos && place.photos.length > 0) {
            const firstPhotoUrl = place.photos[0].getUrl({ maxWidth: 2000, maxHeight: 1600 });
            const img = document.createElement("img");
            img.src = firstPhotoUrl;
            img.style.width = "400px";
            img.style.height = "300px";
            li.appendChild(img);
          }

          // 住所を表示
          if (place.formatted_address) {
            const address = document.createElement("p");
            address.textContent = place.formatted_address.replace("日本、", "" );
            li.appendChild(address);
          }

          // 評価を表示
          if (place.rating) {
            const rating = document.createElement("p");
            rating.textContent = `評価☆ ${place.rating}(レビュー件数:${place.user_ratings_total}件)`;
            li.appendChild(rating);
          }

          // 営業時間を表示
          console.log(`営業時間は${place.opening_hours.weekday_text}`)
          if (place.opening_hours.weekday_text) {
            const weekdayBusinessHours = document.createElement("p");
            hours.textContent = `営業時間: ${place.opening_hours.weekday_text.join(", ")}`;
            li.appendChild(businessHours);
          }

          // ルート情報を表示
          routeInfos.forEach(info => {
            const routeLink = document.createElement("a");
            let avoidParams = '';
            if (info.type === 'avoidHighways') {
              avoidParams = 'tolls,highways';
            } else if (info.type === 'avoidTolls') {
              avoidParams = 'tolls';
            }
            routeLink.href = `https://www.google.com/maps/dir/?api=1&destination=${place.name}&travelmode=driving&avoid=${avoidParams}`;
            routeLink.target = "_blank";
            routeLink.textContent = `${info.type === 'noAvoid' ? '有料道路使って行く' : info.type === 'avoidTolls' ? '有料道路を回避して行く' : '下道だけで行く'} (予想所要時間: ${info.drivingTime}, 距離: 約${info.textDistance})`;
            li.appendChild(routeLink);
          });

          const button = document.createElement("button");
          button.textContent = "詳細";
          button.dataset.placeId = place.place_id;
          button.addEventListener("click", () => {
            // フォーム要素を作成
            const form = document.createElement('form');
            form.method = 'POST';
            form.action = '/destinations';
            
            // place_data を hidden フィールドとして追加
            const placeDataInput = document.createElement('input');
            placeDataInput.type = 'hidden';
            placeDataInput.name = 'place_data';
            // 画像情報を含めた place_data を作成
            const placeDataWithImage = {
              ...place, // place オブジェクト全体をplaceDataWithImageコピー
              photo_url: place.photos && place.photos.length > 0 ? place.photos[0].getUrl({ maxWidth: 2000, maxHeight: 1600 }) : null // 画像URLを追加
            };

            placeDataInput.value = JSON.stringify(placeDataWithImage); 
            form.appendChild(placeDataInput);
            
            // CSRF トークンを追加
            const csrfToken = document.querySelector('meta[name="csrf-token"]').content;
            const csrfTokenInput = document.createElement('input');
            csrfTokenInput.type = 'hidden';
            csrfTokenInput.name = 'authenticity_token';
            csrfTokenInput.value = csrfToken;
            form.appendChild(csrfTokenInput);
            
            // フォームを body に追加して送信
            document.body.appendChild(form);
            form.submit();
          });
        
          li.appendChild(button);

          placesList.appendChild(li);

          li.addEventListener("click", function() {
            map.setCenter(location);
          });
        }).catch(error => console.error(error));
        }
      });
  }else{
    console.log("addPlaces elseになっている")
    const li = document.createElement("li");
    const no_results = document.createElement("p");
    const chromeLocationInformationSettingLink = document.createElement("a");
    const safariLocationInformationSettingLink = document.createElement("a");
    if(places){
      console.log("placesはtrue")
      no_results.textContent = "検索条件に該当する候補地がありません";
      placesList.appendChild(no_results);
    }else{
      console.log("placesはfalse")
      no_results.textContent = "現在地が取得できませんでした。お使いのブラウザの位置情報の取得を許可して下さい";
      chromeLocationInformationSettingLink.href = "https://support.google.com/chrome/answer/142065?hl=ja&co=GENIE.Platform%3DiOS&oco=1"
      chromeLocationInformationSettingLink.target = "_blank";
      chromeLocationInformationSettingLink.textContent = "Google Chromeを使われている方"
      safariLocationInformationSettingLink.href = "https://ssl.help.tsite.jp/faq/show/59512?site_domain=qa-tsite"
      safariLocationInformationSettingLink.target = "_blank";
      safariLocationInformationSettingLink.textContent = "safariを使われている方"
      placesList.appendChild(no_results);
      li.appendChild(chromeLocationInformationSettingLink);
      li.appendChild(safariLocationInformationSettingLink);
      placesList.appendChild(li);
    }
  }
}


</script>
<script async defer src="https://maps.googleapis.com/maps/api/js?key=<%= ENV["GOOGLE_MAPS_API_KEY"] %>&libraries=places,geometry&callback=initMap"></script>
