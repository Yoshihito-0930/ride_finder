<div class="bg-base-200 menu items-center">
<!-- マップを表示する要素 -->
<div id="map" style="height: 400px; width: 600px;"></div>
  <div id="map"></div>
  <!--<div id="sidebar">-->
    <h2 class="text-lg">検索結果</h2>
    <ul id="places">
    </ul>
    <button class="btn" id="more">もっと見る</button>
  </div>
</div>
</div>

<script>
let map;
let pos;
let currentInfoWindow = null;

function initMap() {
  if (navigator.geolocation) {
    navigator.geolocation.getCurrentPosition(
      function(position) {
        pos = {
          lat: position.coords.latitude,
          lng: position.coords.longitude
        };
        map = new google.maps.Map(
          document.getElementById("map"),
          {
            center: pos,
            zoom: 12,
          }
        );
        performNearbySearch(pos);
      },
      function() {
        const defaultLocation = { lat: 35.6803997, lng: 139.7690174 };
        map = new google.maps.Map(
          document.getElementById("map"),
          {
            center: defaultLocation,
            zoom: 10,
          }
        );
        performNearbySearch(defaultLocation);
      }
    );
  } else {
    const defaultLocation = { lat: 35.6803997, lng: 139.7690174 };
    map = new google.maps.Map(
      document.getElementById("map"),
      {
        center: defaultLocation,
        zoom: 10,
      }
    );
    performNearbySearch(defaultLocation);
  }
}

// 現在地を示す青丸のアイコンを作成 調整中
function setCurrentLocationMaker(map, position){
  new google.maps.Marker({
      position: position,
      map: map,
      icon: {
        path: google.maps.SymbolPath.CIRCLE,
        fillColor: '#115EC3',
        fillOpacity: 1,
        strokeColor: 'white',
        strokeWeight: 2,
        scale: 7
      },
  });
}

// 現在地を示す青丸のアイコンを表示  調整中
setCurrentLocationMaker(map, pos);



function performNearbySearch(location) {
  const service = new google.maps.places.PlacesService(map);
  let getNextPage;
  const moreButton = document.getElementById("more");

  if (moreButton) {
    moreButton.onclick = function () {
      moreButton.disabled = true;
      if (getNextPage) {
        getNextPage();
      }
    };
  }

  let request
  let typeCategory
  let textCategory

  // nearbySearchでtypeが無いものはtextSearchを使う
  switch("<%= @category %>"){
    case "tourist_attraction":
      typeCategory = "<%= @category %>";
      break;
    case "scenic_spot":
      textCategory = "景勝地";
      break;
    case "roadside_station":
      textCategory = "道の駅";
      break;
    case "campground":
      typeCategory = "<%= @category %>";
      break;
    case "viewpoint":
      textCategory = "展望所";
      break;
  }

  const condition = "<%= @condition %>"
  let time;
  let radius;

  if (condition === "time") {
    switch ("<%= @condition_value %>") {
      case "1時間30分":
        time = 90;
        break;
      case "60分":
        time = 60;
        break;
      case "45分":
        time = 45;
        break;
    }
  }else{
    radius = "<%= @condition_value %>" * 1000;
  }
  
  if (typeCategory) {
    request = {
      location: pos,
      radius: radius,
      type: [typeCategory],
      language: 'ja'
    };

    service.nearbySearch(request,
    function (results, status, pagination) {
      if (status !== google.maps.places.PlacesServiceStatus.OK || !results) {
        console.log("ここで止まっている",status)
      return;
      }

      addPlaces(results, map);
      if (moreButton) {
        moreButton.disabled = !pagination || !pagination.hasNextPage;

        if (pagination && pagination.hasNextPage) {
          getNextPage = function () {
            pagination.nextPage();
          };
        }
      }
    });
  } else if(textCategory){
    request = {
      location: pos,
      radius: radius,
      query: textCategory,
      language: 'ja'
    };
    service.textSearch(request,
    function (results, status, pagination) {
      let filteredResults = results
      if (status !== google.maps.places.PlacesServiceStatus.OK || !results) {
        filteredResults = "検索に該当する候補地がありません"
      }else{
        /*
        調整中　検索範囲を何km〜何km以内で検索できるか
        filteredResults = results.filter(place => {
          const distance = google.maps.geometry.spherical.computeDistanceBetween(
            location,
            place.geometry.location
          );
          return distance <= radius; 
          // return distance >= 30000 && distance <= 50000;  // 30km以上50km以内
        } 
        */
        
        if (textCategory === "道の駅"){
          filteredResults = results.filter(result => {
            return result.name.includes('道の駅') && !result.name.includes('駐車場') && !result.name.includes('ドッグラン')&& !result.name.includes('駐輪場')&& !result.name.includes('トイレ')&& !result.name.includes('レストラン')&& !result.name.includes('食堂')&& !result.name.includes('本店');
          });
      }
    }

    let sortedResults = sortResultsByDistance(filteredResults, location);
      addPlaces(sortedResults, map);
      if (moreButton) {
        moreButton.disabled = !pagination || !pagination.hasNextPage;

        if (pagination && pagination.hasNextPage) {
          getNextPage = function () {
            pagination.nextPage();
          };
        }
      }
    });
  }
}


function sortResultsByDistance(results, userLocation) {
  results.sort((a, b) => {
    const distanceA = google.maps.geometry.spherical.computeDistanceBetween(userLocation, a.geometry.location);
    const distanceB = google.maps.geometry.spherical.computeDistanceBetween(userLocation, b.geometry.location);
    return distanceA - distanceB;
  });
  return results;
}


function getRoutes(location, callback) {
  const directionsService = new google.maps.DirectionsService();
  const origin = pos;  // ユーザーの現在地
  const destination = location; //'目的地の住所'

  // 共通のリクエスト
  const baseRequest = {
    origin: origin,
    destination: destination,
    travelMode: 'DRIVING',
    drivingOptions: {
      departureTime: new Date(Date.now() + 5000),  // 現在の時刻だと適切に処理されない可能性があるため現在時刻の5秒後を指定
      trafficModel: 'bestguess'
    }
  };

  // 高速道路を避けるリクエスト(一般道のみ)
  const avoidHighwaysRequest = {
    ...baseRequest,
    avoidHighways: true,
    avoidTolls: true
  };

  // 有料道路を避けるリクエスト(高速無料区間は通る)
  const avoidTollsRequest = {
    ...baseRequest,
    avoidTolls: true
  };

  // 有料、高速道路を回避なしリクエスト
  const noAvoidRequest = {
    ...baseRequest
  };


  const requests = [
    { request: noAvoidRequest, type: 'noAvoid' },
    { request: avoidTollsRequest, type: 'avoidTolls' },
    { request: avoidHighwaysRequest, type: 'avoidHighways' }
  ];

  const promises = requests.map(({ request, type }) =>
    new Promise((resolve, reject) => {
      directionsService.route(request, (response, status) => {
        if (status === 'OK') {
          const route = response.routes[0];
          let duration;
          if (route.legs[0].duration_in_traffic) {
            duration = route.legs[0].duration_in_traffic.text;
          } else {
            duration = route.legs[0].duration.text;
          }
          const drivingTime = duration.replace("hours", "時間").replace("mins", "分");
          const distance = route.legs[0].distance.text;
          resolve({ type, drivingTime, distance });
        } else {
          reject('Directions request failed due to ' + status);
        }
      });
    })
  );

  return Promise.all(promises);
}

function addPlaces(places, map) {
  const placesList = document.getElementById("places");
  placesList.innerHTML = ""; // 前の結果をクリア

  if (Array.isArray(places)) {
    places.forEach(place => {
      if (place.geometry && place.geometry.location) {
        const location = place.geometry.location;

        // ルート情報が取得された後に実行するコールバック関数
        const displayRouteInfo = (routeInfos) => {
          const marker = new google.maps.Marker({
            map,
            title: place.name,
            position: location,
          });

          const li = document.createElement("li");
          li.textContent = `名称：${place.name}`;
          if (place.photos && place.photos.length > 0) {
            const firstPhotoUrl = place.photos[0].getUrl({ maxWidth: 2000, maxHeight: 1600 });
            const img = document.createElement("img");
            img.src = firstPhotoUrl;
            img.style.width = "400px";
            img.style.height = "300px";
            li.appendChild(img);
          }

          // 住所を表示
          if (place.formatted_address) {
            const address = document.createElement("p");
            address.textContent = place.formatted_address.replace("日本、", "" );
            li.appendChild(address);
          }

          // 評価を表示
          if (place.rating) {
            const rating = document.createElement("p");
            rating.textContent = `評価☆ ${place.rating}(レビュー件数:${place.user_ratings_total}件)`;
            li.appendChild(rating);
          }

          // 営業時間を表示
          if (place.current_opening_hours && place.opening_hours.weekday_text) {
            const hours = document.createElement("p");
            hours.textContent = `営業時間: ${place.current_opening_hours.weekday_text.join(", ")}`;
            li.appendChild(hours);
          }

          

          // ルート情報を表示
          routeInfos.forEach(info => {
            const routeLink = document.createElement("a");
            let avoidParams = '';
            if (info.type === 'avoidHighways') {
              avoidParams = 'tolls,highways';
            } else if (info.type === 'avoidTolls') {
              avoidParams = 'tolls';
            }
            routeLink.href = `https://www.google.com/maps/dir/?api=1&destination=${place.name}&travelmode=driving&avoid=${avoidParams}`;
            routeLink.target = "_blank";
            routeLink.textContent = `${info.type === 'noAvoid' ? '有料道路含むルート' : info.type === 'avoidTolls' ? '有料道路を回避するルート' : '下道だけのルート'} (予想所要時間: ${info.drivingTime}, 距離: 約${info.distance})`;
            li.appendChild(routeLink);
          });

          placesList.appendChild(li);

          li.addEventListener("click", function() {
            map.setCenter(location);
          });

          const infoWindow = new google.maps.InfoWindow({
            content: place.name,
          });

          marker.addListener('click', function() {
            infoWindow.open(map, marker);
          });
        };

        // getRoutes関数を呼び出し、ルート情報が取得された後にdisplayRouteInfo関数を実行
        getRoutes(location).then(displayRouteInfo).catch(error => console.error(error));
      }
    });
  } else {
    const no_results = document.createElement("p");
    no_results.textContent = "検索条件に該当する候補地がありません";
    placesList.appendChild(no_results);
  }
}


document.addEventListener('DOMContentLoaded', function() {
  initMap();
});

</script>
<script async defer src="https://maps.googleapis.com/maps/api/js?key=<%= ENV["GOOGLE_MAPS_API_KEY"] %>&libraries=places,geometry&callback=initMap"></script>
