<div class="bg-base-200 menu items-center">
<!-- マップを表示する要素 -->
<div id="map" style="height: 400px; width: 600px;"></div>
<div id="container">
  <div id="map"></div>
  <div id="sidebar">
    <h2>検索結果</h2>
    <ul id="places"></ul>
    <button class="btn" id="more">もっと見る</button>
  </div>
</div>
</div>

<script>
let map;
let pos;

function initMap() {
  if (navigator.geolocation) {
    navigator.geolocation.getCurrentPosition(
      function(position) {
        pos = {
          lat: position.coords.latitude,
          lng: position.coords.longitude
        };
        map = new google.maps.Map(
          document.getElementById("map"),
          {
            center: pos,
            zoom: 12,
          }
        );
        performNearbySearch(pos);
      },
      function() {
        const defaultLocation = { lat: 35.6803997, lng: 139.7690174 };
        map = new google.maps.Map(
          document.getElementById("map"),
          {
            center: defaultLocation,
            zoom: 10,
          }
        );
        performNearbySearch(defaultLocation);
      }
    );
  } else {
    const defaultLocation = { lat: 35.6803997, lng: 139.7690174 };
    map = new google.maps.Map(
      document.getElementById("map"),
      {
        center: defaultLocation,
        zoom: 10,
      }
    );
    performNearbySearch(defaultLocation);
  }
}

function performNearbySearch(location) {
  const service = new google.maps.places.PlacesService(map);
  let getNextPage;
  const moreButton = document.getElementById("more");

  if (moreButton) {
    moreButton.onclick = function () {
      moreButton.disabled = true;
      if (getNextPage) {
        getNextPage();
      }
    };
  }

  let request
  let typeCategory
  let textCategory
  switch("<%= @category %>"){
    case "tourist_attraction":
      typeCategory = "<%= @category %>";
      break;
    case "scenic_spot":
      textCategory = "景勝地";
      break;
    case "roadside_station":
      textCategory = "道の駅";
      break;
  }
  if ( typeCategory ) {
    request = {
      location: pos,
      radius: "5000",
      type: [typeCategory],
      language: 'ja'
    };
    service.nearbySearch(request,
    function (results, status, pagination) {
      if (status !== google.maps.places.PlacesServiceStatus.OK || !results) return;

      addPlaces(results, map);
      if (moreButton) {
        moreButton.disabled = !pagination || !pagination.hasNextPage;

        if (pagination && pagination.hasNextPage) {
          getNextPage = function () {
            pagination.nextPage();
          };
        }
      }
    });
  } else if( textCategory){
    request = {
      location: pos,
      radius: "5000",
      query: textCategory,
      language: 'ja'
    };
    service.textSearch(request,
    function (results, status, pagination) {
      if (status !== google.maps.places.PlacesServiceStatus.OK || !results) return;

      addPlaces(results, map);
      if (moreButton) {
        moreButton.disabled = !pagination || !pagination.hasNextPage;

        if (pagination && pagination.hasNextPage) {
          getNextPage = function () {
            pagination.nextPage();
          };
        }
      }
    });
  }
}

function addPlaces(places, map) {
  const placesList = document.getElementById("places");
  placesList.innerHTML = ""; // Clear previous results

  for (const place of places) {
    if (place.geometry && place.geometry.location) {
      const image = {
        url: place.icon,
        size: new google.maps.Size(71, 71),
        origin: new google.maps.Point(0, 0),
        anchor: new google.maps.Point(17, 34),
        scaledSize: new google.maps.Size(25, 25),
      };

      new google.maps.Marker({
        map,
        icon: image,
        title: place.name,
        position: place.geometry.location,
      });

      const li = document.createElement("li");
      li.textContent = place.name;
      placesList.appendChild(li);

      li.addEventListener("click", function() {
        map.setCenter(place.geometry.location);
      });
    }
  }
}

document.addEventListener('DOMContentLoaded', function() {
  initMap();
});

</script>
<script async defer src="https://maps.googleapis.com/maps/api/js?key=<%= ENV["GOOGLE_MAPS_API_KEY"] %>&libraries=places&callback=initMap"></script>
