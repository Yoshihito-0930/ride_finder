
<section class="body-font">
  <div class="container py-8 mx-auto">
    <div class="flex flex-wrap w-full mb-10 md:ml-10">
      <div class="lg:w-1/2 w-full mb-6 lg:mb-0">
        <div class="mt-10 mx-3 flex flex-row justify-start">
          <%= link_to "戻る", 'javascript:history.back()' , class: "bg-card-body bg-base-300 border  rounded-full py-2 px-5 hover:bg hover:border-neutral hover:text-neutral focus:outline-none focus:ring-2 focus:ring-offset-2" %>
        </div>
        <div class="h-1 w-20 rounded"></div>
        </div>
      </div>
    <div class="flex justify-center my-4 rounded-lg bg-base-200">
      <% if @destination %>
        <ul>
          <li class="text-xl py-4"><%= @destination.name %></li>
          <div class="favorite flex-none flex justify-end">
            <% if logged_in? %>
              <%= render 'shared/future_visit_button', destination: @destination %>
              <%= render 'shared/favorite', destination: @destination %>
            <% end %>
          </div>
          <% if @destination.image.present? %>
            <li><%= image_tag "data:image/jpeg;base64,#{@destination.image}", width: 500, height: 400, class: "custom-image" %></li>
          <% end %>
          <li><%= @destination.address %> </li>
          <% if @destination.rating %>
            <li><a >評価: ★<%= @destination.rating %>(レビュー件数:<%=@destination.user_ratings_total%>件)</a> </li>
          <% end %>
          <% if @destination.website %>
            <li>
              <%= link_to "#{@destination.website}", class: 'btn my-', target: :_blank do %> 
                <svg version="1.1" id="_x32_" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" x="0px" y="0px" viewBox="0 0 512 512" style="width: 32px; height: 32px; opacity: 1;" xml:space="preserve">
                  <g><path class="st0" d="M0,48v416c0,26.508,21.492,48,48,48h416c26.508,0,48-21.492,48-48V48c0-26.508-21.492-48-48-48H48
                		C21.492,0,0,21.492,0,48z M86.336,54c0,10.492-8.508,19-19,19c-10.492,0-19-8.508-19-19s8.508-19,19-19
                		C77.828,35,86.336,43.508,86.336,54z M156.836,54c0,10.492-8.508,19-19,19c-10.492,0-19-8.508-19-19s8.508-19,19-19
                		C148.328,35,156.836,43.508,156.836,54z M227.336,54c0,10.492-8.508,19-19,19c-10.492,0-19-8.508-19-19s8.508-19,19-19
                		C218.828,35,227.336,43.508,227.336,54z M40,104h432v360c0,4.406-3.586,8-8,8H48c-4.414,0-8-3.594-8-8V104z" style="fill: rgb(58, 171, 210);"></path>
                	<rect x="264" y="192" class="st0" width="152" height="32" style="fill: rgb(58, 171, 210);"></rect>
                	<rect x="88" y="352" class="st0" width="328" height="32" style="fill: rgb(58, 171, 210);"></rect>
                	<rect x="88" y="192" class="st0" width="120" height="120" style="fill: rgb(58, 171, 210);"></rect>
                	<polygon class="st0" points="282.958,304 264,304 264,272 416,272 416,304 298.958,304 	" style="fill: rgb(58, 171, 210);"></polygon></g>
                </svg>
                この場所の公式情報を見る
              <% end %>
            </li>
          <% end %>
          <li>
            <%= link_to "https://maps.app.goo.gl/?link=https://www.google.com/maps/place/?q=place_id:#{sanitize(@destination.google_maps_place_id)}", class: 'btn my-4', target: :_blank do %>
              <svg height="42" viewBox="-.6 -.1 2019.478 1816.4" width="42" xmlns="http://www.w3.org/2000/svg"><path d="m1023 1638 82.8-34.4c-4.6-11.6-18.2-19.6-34.4-19.6-20.7-.1-49.4 18.2-48.4 54m97.2 33.3 31.6 21c-10.2 15.1-34.7 41.1-77.2 41.1-52.6 0-90.6-40.7-90.6-92.6 0-55.1 38.3-92.6 86.1-92.6 43.9 1.5 71.2 29.8 83.5 69.4l-124 51.2c9.5 18.6 24.2 28.1 44.9 28.1 20.6 0 35-10.2 45.5-25.6m-201 56.5h40.7v-272h-40.7zm-66.4-86.7c0-32.6-21.8-56.5-49.5-56.5-28 0-51.6 23.9-51.6 56.5 0 32.3 23.5 55.8 51.6 55.8 27.8 0 49.5-23.5 49.5-55.8zm35.8-87.3v166c0 68.4-40.3 96.5-88 96.5-44.9 0-71.9-30.2-82.1-54.7l35.4-14.7c6.3 15.1 21.8 33 46.7 33 45.5-5.17 49.5-34.6 49.5-67.7h-1.5c-9.1 11.2-26.7 21.1-48.8 21.1-46.3 0-88.8-40.3-88.8-92.3 0-52.3 42.4-93 88.8-93 22.1 0 39.7 9.8 48.8 20.7h1.4v-15.1c0-.1 38.6-.1 38.6-.1zm-444 87c0-33.3-23.8-56.1-51.3-56.1-27.6 0-51.3 22.8-51.3 56.1 0 33 23.8 56.1 51.3 56.1s51.3-23.2 51.3-56.1m40 0c0 53.3-41 92.6-91.3 92.6s-91.3-39.3-91.3-92.6c0-53.7 41-92.6 91.3-92.6s91.3 38.9 91.3 92.6m165 0c0-33.3-23.8-56.1-51.3-56.1-27.6 0-51.3 22.8-51.3 56.1 0 33 23.8 56.1 51.3 56.1s51.3-23.2 51.3-56.1m40 0c0 53.3-41 92.6-91.3 92.6s-91.3-39.3-91.3-92.6c0-53.7 41-92.6 91.3-92.6s91.3 38.9 91.3 92.6m-544 92.6c-79.2 0-146-64.6-146-144 0-79.3 66.7-144 146-144 43.9 0 75.1 17.2 98.6 39.7l-27.7 27.7c-16.8-15.8-39.6-28.1-70.9-28.1-57.9 0-103 46.7-103 104 0 57.9 45.3 104 103 104 37.5 0 58.9-15.1 72.6-28.8 11.2-11.2 18.6-27.4 21.4-49.5h-94v-39.3h132c1.4 7 2.1 15.4 2.1 24.5 0 29.5-8.1 66-34 91.9-25.2 26.5-57.5 40.6-100 40.6" fill="#5f6368" fill-rule="evenodd"/><path d="m1249.14 1725.74v-241.806h31.228l83.978 147.278h1.266l83.978-147.278h31.228v241.806h-31.218l1.266-183.992h-1.266l-75.538 132.508h-18.146l-75.538-132.508h-1.266c2.304 61.2 1.266 122.802 1.266 183.992zm329.16 4.22c-17.724 0-32.072-5.064-43.888-15.192s-17.724-23.632-17.724-40.1c0-18.146 7.174-32.072 21.1-42.2s31.228-15.192 51.484-15.192c18.146 0 33.338 3.376 44.732 10.128-.303-35.1-24.56-44.732-43.466-44.732-17.85.848-33.338 8.313-39.668 24.054l-28.274-12.238c3.798-9.706 11.394-19 22.788-27.43s26.164-12.66 44.732-12.66c21.1 0 38.824 6.33 52.75 18.568s21.1 29.962 21.1 52.328v100.014h-29.54v-22.788c-13.8 17.302-32.452 27.05-56.126 27.43zm55.704-76.804c-18.188-13.842-56.126-15.572-73.85-1.266-13.926 13.504-15.403 31.608-.844 42.2 35.195 22.577 75.96-12.576 74.694-40.934zm151.076 76.804c-12.66 0-24.054-2.532-33.76-8.018s-17.302-12.238-22.366-20.256h-1.688l1.266 22.788v73.006h-30.806v-238.43h29.54v22.788h1.266c5.064-8.018 12.238-14.77 22.366-20.256s21.522-8.018 33.76-8.018c21.522 0 39.668 8.44 55.282 25.32s23.2 37.98 23.2 62.878-7.596 45.998-23.2 62.878c-15.192 16.88-33.76 25.32-54.86 25.32zm-5.064-28.696c14.348 0 26.586-5.486 37.136-16.458s15.614-25.32 15.614-43.466-5.064-32.494-15.614-43.466-22.788-16.458-37.136-16.458c-14.77 0-27.008 5.486-37.136 16.036-10.128 10.972-15.192 25.32-15.192 43.466s5.064 32.916 15.192 43.466c10.128 11.816 22.366 16.88 37.136 16.88zm173.864 28.696c-18.568 0-33.76-4.642-45.576-13.504-12.238-8.862-20.678-20.256-26.586-33.76l27.852-11.394c8.862 20.678 23.632 31.228 44.732 31.228 9.706 0 17.724-2.1 23.632-6.33 6.33-4.22 9.284-9.706 9.284-16.88 0-10.972-7.596-18.146-22.788-21.944l-33.338-8.018c-10.55-2.532-20.678-8.018-29.962-15.192s-14.348-17.724-14.348-30.384c0-14.77 6.33-26.586 19.412-35.448 13.082-9.284 28.274-13.504 45.998-13.504 14.77 0 27.852 3.376 39.246 10.128s19.834 16.036 24.476 28.696l-27.008 10.972c-5.908-14.77-18.568-21.944-37.98-21.944-9.284 0-16.88 2.1-23.2 5.908s-9.284 8.862-9.284 15.614c0 9.284 7.174 16.036 21.944 19.412l32.916 7.596c15.614 3.798 27.008 9.706 34.604 18.568s10.972 18.568 10.972 29.54c0 14.77-5.908 27.43-18.146 37.136-11.816 8.44-27.43 13.504-46.842 13.504z" fill="#63666a"/><path d="m831 909.9c37.9 47.4 76.5 107 96.7 143 24.6 46.8 34.8 78.4 53.1 135 10.7 31 20.9 40.4 42.3 40.4 23.4 0 34.1-15.8 42.3-40.4 17.1-53.1 30.3-93.5 51.2-132 80.6-152 212-260 286-408 0 0 48.7-90.4 48.7-217 0-118-48-200-48-200l-572 680z" fill="#34a853"/><path d="m637 631.9c46.1 105 134 197 194 278l318-377s-44.9 58.8-126 58.8c-90.4 0-164-72-164-163 0-62.6 37.3-106 37.3-106-234 34.8-221 91.5-260 309z" fill="#fbbc04"/><path d="m1153 19.6c106 34.1 196 106 250 211l-254 303s37.3-43.6 37.3-106c0-92.9-78.4-163-163-163-80.3 0-126 58.1-126 58.1 19.5-44.4 221-288 256-303z" fill="#4285f4"/><path d="m695 152.9c63.2-75.2 174-153 327-153 73.9 0 130 19.6 130 19.6l-255 303c-17.2-9.33-185-140-202-170z" fill="#1a73e8"/><path d="m637 631.9s-41.7-82.8-41.7-202c0-113 44.2-212 100-276l202 170-260 308z" fill="#ea4335"/></svg>
              Google Mapで開く
            <% end %>
          </li>
          <button class="btn my-4" data-lat="<%= @destination.latitude %>" data-lng="<%= @destination.longitude %>">
            行ってみる
          </button>
          <%= render "shared/route_modal" %>
        </ul>
      <% end %>
    </div>
    
    <div class="flex flex-col sm:flex-row flex-wrap justify-center items-center rounded-lg bg-base-200 py-4">
     <div id="map" class="w-full sm:w-1/2 h-64 sm:h-96"></div>
     <div id="pano" class="w-full sm:w-1/2 h-64 sm:h-96"></div>
    </div>
  </div>
<div>

<script>
  let map;
  let mapInitialized = false;
  const destinationLat = Number("<%= @destination.latitude %>")
  const destinationLng = Number("<%= @destination.longitude %>")
  const setLocation = { lat: destinationLat, lng: destinationLng };
  let currentLocation
  
  console.log(`destinationLat${destinationLat}`)
  console.log(`destinationLng${destinationLng}`)
  console.log(`setLocationは${setLocation}`)

  function initMap() {
    if (mapInitialized) {
      return;
    }
    if (navigator.geolocation) {
      navigator.geolocation.getCurrentPosition(
        function(position) {
          currentLocation = {
            lat: position.coords.latitude,
            lng: position.coords.longitude
          };
          map = new google.maps.Map(
            document.getElementById("map"),
            {
              center: setLocation,
              zoom: 11,
              fullscreenControl: false,
              streetViewControl: false,
              keyboardShortcuts: false,
              mapTypeControl: true,
            }
          );

          streetViewService(setLocation)
          directionsService = new google.maps.DirectionsService();
          directionsRenderers = {
            noAvoid: new google.maps.DirectionsRenderer({ map }),
            avoidTolls: new google.maps.DirectionsRenderer({ map }),
            avoidHighways: new google.maps.DirectionsRenderer({ map }),
          };

          // ページ読み込み時にルートを表示
          displayRoutes(setLocation);
          toggleRoute("avoidHighways");
        },
        function(error) {
          console.error("Error occurred. Error code: " + error.code);
          map = new google.maps.Map(
            document.getElementById("map"),
            {
              center: setLocation,
              zoom: 10,
            }
          );
          setDestinationMarker(setLocation, map)
          streetViewService(setLocation)
          mapInitialized = true;
        }
      );
      mapInitialized = true;
    } else { // Geolocation APIをサポートしていないブラウザの処理
      console.log("ブラウザがGeolocation APIに対応しておりませんを追加")
        map = new google.maps.Map(
          document.getElementById("map"),
          {
            center: setLocation,
            zoom: 10,
            fullscreenControl: false,
            streetViewControl: false,
            keyboardShortcuts: false,
            mapTypeControl: true,
          }
        );
      setDestinationMarker(setLocation, map)
      streetViewService(setLocation)
      mapInitialized = true;
    }
  }

  // ルートを取得して地図に描画
  function displayRoutes(location) {
    const baseRequest = {
      origin: currentLocation,
      destination: location,
      travelMode: 'DRIVING',
      drivingOptions: {
        departureTime: new Date(Date.now() + 5000),
        trafficModel: 'bestguess',
      },
    };

    const requests = {
      noAvoid: { ...baseRequest },
      avoidTolls: { ...baseRequest, avoidTolls: true },
      avoidHighways: { ...baseRequest, avoidTolls: true, avoidHighways: true },
    };

    // 各ルートを DirectionsService で取得し、描画
    Object.keys(requests).forEach((key) => {
      directionsService.route(requests[key], (response, status) => {
        if (status === 'OK') {
          directionsRenderers[key].setDirections(response);

          // マーカーを設定
        const leg = response.routes[0].legs[0];
        if (key === "avoidHighways") {
          // 現在地のマーカー
          new google.maps.Marker({
            position: leg.start_location,
            map: map,
            icon: {
              path: google.maps.SymbolPath.CIRCLE,
              fillColor: "#115EC3",
              fillOpacity: 1,
              strokeColor: "white",
              strokeWeight: 2,
              scale: 7,
            },
          });

          // 目的地のマーカー
          new google.maps.Marker({
            position: leg.end_location,
            map: map,
            icon: null,
          });
        }
        } else {
          console.error(`ルート取得失敗: ${key}, ステータス: ${status}`);
        }});
    });
  }

  // 表示するルートを切り替える
  function toggleRoute(type) {
    Object.keys(directionsRenderers).forEach((key) => {
      if (key === type) {
        directionsRenderers[key].setMap(map); // 選択されたルートを表示
      } else {
        directionsRenderers[key].setMap(null); // 他のルートは非表示
      }
    });
  }

  /*
  function setDestinationMarker(setLocation, map){
    new google.maps.Marker({
      map: map,
      title: "<%= @destination.name %>",
      position: setLocation
    });
  }
  */

  function streetViewService(setLocation){
    new google.maps.StreetViewPanorama(
      document.getElementById('pano'), {
        position: setLocation,
        pov: {heading: 0, pitch: 0, zoom: 0},
        motionTracking: false,
        motionTrackingControl: false,
        fullscreenControl: false,
        linksControl: false,
      }
   );
  }


  function getRoutes(location, callback) {
    const directionsService = new google.maps.DirectionsService();
  
    // 共通のリクエスト
    const baseRequest = {
      origin: currentLocation,
      destination: setLocation,
      travelMode: 'DRIVING',
      drivingOptions: {
        departureTime: new Date(Date.now() + 5000),  // 現在の時刻だと適切に処理されない可能性があるため現在時刻の5秒後を指定
        trafficModel: 'bestguess'
      }
    };
    
    // 高速道路を避けるリクエスト(一般道のみ)
    const avoidHighwaysRequest = {
      ...baseRequest,
      avoidHighways: true,
      avoidTolls: true
    };
    
    // 有料道路を避けるリクエスト(高速無料区間は通る)
    const avoidTollsRequest = {
      ...baseRequest,
      avoidTolls: true
    };
    
    // 有料、高速道路を回避なしリクエスト
    const noAvoidRequest = {
      ...baseRequest
    };
    
    
    const requests = [
      { request: noAvoidRequest, type: 'noAvoid' },
      { request: avoidTollsRequest, type: 'avoidTolls' },
      { request: avoidHighwaysRequest, type: 'avoidHighways' }
    ];
    
    const promises = requests.map(({ request, type }) =>
      new Promise((resolve, reject) => {
        directionsService.route(request, (response, status) => {
          if (status === 'OK') {
            const route = response.routes[0];
            let duration;
            let durationSeconds;
            if (route.legs[0].duration_in_traffic) {
              duration = route.legs[0].duration_in_traffic.text;
              durationSeconds = route.legs[0].duration.value;
            } else {
              duration = route.legs[0].duration.text;
              durationSeconds = route.legs[0].duration.value;
            }
            const drivingMinutes = Math.ceil(durationSeconds / 60);
            const drivingTime = duration.replace("hours", "時間").replace("mins", "分");
            const textDistance = route.legs[0].distance.text; // 距離をstring型でkmで取得
            const numberDistance = route.legs[0].distance.value; // 距離をメートルで取得
            resolve({ type, drivingTime, textDistance, numberDistance, drivingMinutes });
          } else {
            reject('Directions request failed' + status);
          }
        });
      })
    );
    
    return Promise.all(promises);
  }


  
  // ページ読み込み時の処理 (DOMContentLoadedリファクタリング要)
  document.addEventListener("DOMContentLoaded", () => {
    // 初期ルートを表示
    displayRoutes(setLocation);
    toggleRoute("avoidHighways")

    // 「行ってみる」ボタンのイベントリスナー
    const buttons = document.querySelectorAll("button[data-lat][data-lng]");
    buttons.forEach((button) => {
      button.addEventListener("click", () => {
        const location = { destinationLat, destinationLng };
      });
    });

    // 切り替えボタンのイベントリスナーを設定(調整中)
    document.getElementById("toggle-avoidHighways").addEventListener("click", () => toggleRoute("avoidHighways"));
    // document.getElementById("toggle-avoidTolls").addEventListener("click", () => toggleRoute("avoidTolls"));
    // document.getElementById("toggle-noAvoid").addEventListener("click", () => toggleRoute("noAvoid"));
  });

 
  document.addEventListener("DOMContentLoaded", () => {
  const routeModal = document.getElementById("route-modal");
  const routeContent = document.getElementById("route-content");
  const buttons = document.querySelectorAll("button[data-lat][data-lng]");

  buttons.forEach((button) => {
    button.addEventListener("click", async () => {
      try {
        const routeInfos = await getRoutes(setLocation);

        // ルート情報をモーダルに挿入
        routeContent.innerHTML = `
          <h2 class="text-xl">ルート情報</h2>
          <p>※実際の交通規制に従って走行してください</p>
          <ul>
            ${routeInfos.map(info => `
              <li class="py-4 text-center">
                <strong>${info.type === "noAvoid" ? "有料道路を使って行く" : info.type === "avoidTolls" ? "有料道路を回避して行く" : "下道だけで行く(125cc以下推奨)"}</strong>
                <p>所要時間: ${info.drivingTime}</p>
                <p>距離: ${info.textDistance}</p>
                <a href="https://www.google.com/maps/dir/?api=1&destination=${destinationLat},${destinationLng}&travelmode=driving&avoid=${info.type === "avoidHighways" ? "tolls,highways" : info.type === "avoidTolls" ? "tolls" : ""}" target="_blank" class="btn">
                  このルートで行く
                </a>
              </li>
            `).join("")}
          </ul>
        `;

        // モーダルを表示
        routeModal.showModal();
      } catch (error) {
        console.error("ルート情報の取得に失敗しました:", error);
        alert("ルート情報の取得に失敗しました。");
      }
    });
  });
});

</script>
<script async defer src="https://maps.googleapis.com/maps/api/js?key=<%= ENV["GOOGLE_MAPS_API_KEY"] %>&libraries=geometry&callback=initMap"></script>