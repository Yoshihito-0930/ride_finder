<section class="body-font">
  <div class="container py-4 mx-auto">
    <div class="flex flex-wrap w-full mb-6 md:ml-10">
      <div class="lg:w-1/2 w-full ">
        <div class=" mx-3 flex flex-row justify-start">
          <%= link_to "戻る", 'javascript:history.back()', data: { turbo: false }, class: "bg-card-body bg-base-300 border rounded-full py-2 px-5 hover:bg hover:border-neutral hover:text-neutral focus:outline-none focus:ring-2 focus:ring-offset-2" %>
        </div>
      </div>
    </div>
    <div class="flex justify-center rounded-lg bg-base-200">
      <% if @destination %>
        <ul>
          <li class="text-xl py-4"><%= @destination.name %></li>

          <div class="favorite flex-none flex justify-end">
            <% if logged_in? %>
              <%= render 'future_visit_buttons', destination: @destination %>
              <%= render 'favorite_buttons', destination: @destination %>
            <% end %>
            <div>
              <% prepare_meta_tags @destination %>
              <% x_text = "【Ride finder】でツーリングスポット「#{@destination.name}」を見つけたよ！" %>
              <% x_hashtags  = "Ridefinder #ツーリングスポット #ツーリングスポット探し" %>
              <% x_share_url = "https://x.com/share?url= #{CGI.escape(destination_url(@destination))}&text=#{CGI.escape(x_text)}&hashtags=#{CGI.escape(x_hashtags)}" %>
              <%= link_to x_share_url, target: '_blank', data: { toggle: "tooltip", placement: "bottom" }, title: "Xでシェア", class: "btn btn-ghost btn-sm" do %>
                <%= image_tag "x-logo.svg", size:'28x28' %>
              <% end %>
            </div>
          </div>
          <% if @destination.image.attached? %>
            <li><%= image_tag @destination.image, alt: @destination.name, width: 500, height: 400, class: "custom-image" %></li>
          <% else %>
            <li><%= image_tag 'no_image.jpg' %></li>
          <% end %>
          <li><%= @destination.address %> </li>
          <% if @destination.rating %>
            <li>評価: ★<%= @destination.rating %>(レビュー件数:<%=@destination.user_ratings_total%>件) </li>
          <% end %>
          <div>
            <% if @destination.business_hours %>
              <p>営業時間</p>
              <% @destination.business_hours.each do | business_hour |%>
                <li><%= business_hour %> </li>
              <% end %>
            <% end %>
          <% if @destination.website %>
            <li>
              <%= link_to "#{@destination.website}", class: 'btn my-', target: :_blank do %> 
                <%= image_tag "HP_logo.svg", size:'32x32' %>
                この場所の公式情報を見る
              <% end %>
            </li>
          <% end %>
          <li>
            <%= link_to "https://maps.app.goo.gl/?link=https://www.google.com/maps/place/?q=place_id:#{sanitize(@destination.google_maps_place_id)}", class: 'btn my-4', target: :_blank do %>
              <%= image_tag "google-maps-logo-2020.svg", size:'42x42' %>
              Google Mapで開く
            <% end %>
          </li>
          <button id="route-button" class="btn my-4">
            行ってみる
          </button>
          <dialog id="route-modal" class="modal">
            <div class="modal-box">
              <form method="dialog" class="modal-backdrop">
                <button class="btn btn-md btn-circle btn-ghost absolute right-2 top-2">
                  <%= image_tag "close_modal_icon.svg", size:'28x28' %>
                </button>
              </form>
              <div id="route-content"></div>
            </div>
          </dialog>
        </ul>
      <% end %>
    </div>
    
    <div class="flex flex-col sm:flex-row flex-wrap justify-center items-center rounded-lg bg-base-200 py-4">
     <div id="map" class="w-full sm:w-1/2 h-64 sm:h-96"></div>
     <div id="pano" class="w-full sm:w-1/2 h-64 sm:h-96"></div>
    </div>
  </div>
<div>

<script>
  let map;
  let mapInitialized = false;
  const destinationLat = parseFloat("<%= @destination.latitude %>")
  const destinationLng = parseFloat("<%= @destination.longitude %>")
  const setLocation = { lat: destinationLat, lng: destinationLng };
  console.log(`setLocationのlatは${setLocation.lat}でlngは${setLocation.lng}`)
  let currentLocation

  async function initMap() {
  if (mapInitialized) {
    return;
  }
  mapInitialized = true;

  try {
    currentLocation = await getCurrentLocation();

    // 地図の初期化
    map = new google.maps.Map(
      document.getElementById("map"),
      {
        center: setLocation,
        zoom: 11,
        fullscreenControl: false,
        streetViewControl: false,
        keyboardShortcuts: false,
        mapTypeControl: true,
      }
    );

    streetViewService(setLocation);
    setCurrentLocationMarker(currentLocation, map)
    directionsService = new google.maps.DirectionsService();
    directionsRenderers = {
      noAvoid: new google.maps.DirectionsRenderer({ map }),
      avoidTolls: new google.maps.DirectionsRenderer({ map }),
      avoidHighways: new google.maps.DirectionsRenderer({ map }),
    };

    console.log("displayRoute呼び出し")
    displayRoutes(setLocation);
  } catch (error) {
    console.error("ルートの取得に失敗しました:", error);

    map = new google.maps.Map(
      document.getElementById("map"),
      {
        center: setLocation,
        zoom: 10,
        fullscreenControl: false,
        streetViewControl: false,
        keyboardShortcuts: false,
        mapTypeControl: true,
      }
    );
    setDestinationMarker(setLocation, map);
    streetViewService(setLocation);
  }
}

  function getCurrentLocation() {
    return new Promise((resolve, reject) => {
      if (navigator.geolocation) {
        navigator.geolocation.getCurrentPosition(
          (position) => {
            resolve({
              lat: position.coords.latitude,
              lng: position.coords.longitude,
            });
          },
          (error) => {
            reject(error);
          }
        );
      } else {
        reject(new Error("お使いのブラウザではGeolocationがサポートされていません."));
      }
    });
  }

  // 現在地を示す青丸のアイコン
  function setCurrentLocationMarker(currentLocation, map){
    new google.maps.Marker({
        position: currentLocation,
        map: map,
        icon: {
          path: google.maps.SymbolPath.CIRCLE,
          fillColor: '#115EC3',
          fillOpacity: 1,
          strokeColor: 'white',
          strokeWeight: 2,
          scale: 7
        },
    });
  }

  // ルートを取得して地図に描画
  function displayRoutes(location) {
    console.log("displayRoute関数処理開始")
    const baseRequest = {
      origin: currentLocation,
      destination: location,
      travelMode: 'DRIVING',
      drivingOptions: {
        departureTime: new Date(Date.now() + 5000),
        trafficModel: 'bestguess',
      },
    };

    const requests = {
      noAvoid: { ...baseRequest },
      avoidTolls: { ...baseRequest, avoidTolls: true },
      avoidHighways: { ...baseRequest, avoidTolls: true, avoidHighways: true },
    };

    directionsService = new google.maps.DirectionsService();

    // 各ルートを DirectionsService で取得して描画
    Object.keys(requests).forEach((key) => {
      directionsService.route(requests[key], (response, status) => {
        if (status === 'OK') {
          directionsRenderers[key].setDirections(response);

          // マーカーを設定
          const leg = response.routes[0].legs[0];
          if (key === "avoidHi ghways") {
            // 現在地のマーカー
            new google.maps.Marker({
              position: leg.start_location,
              map: map,
              icon: {
                path: google.maps.SymbolPath.CIRCLE,
                fillColor: "#115EC3",
                fillOpacity: 1,
                strokeColor: "white",
                strokeWeight: 2,
                scale: 7,
              },
            });

            // 目的地のマーカー
            new google.maps.Marker({
              position: leg.end_location,
              map: map,
              icon: null,
            });
          }
        } else {
          console.error(`ルート取得失敗: ${key}, ステータス: ${status}`);
        }});
    });
  }

  // 表示するルートを切り替える(実装予定)
  function toggleRoute(type) {
    Object.keys(directionsRenderers).forEach((key) => {
      if (key === type) {
        directionsRenderers[key].setMap(map); // 選択されたルートを表示
      } else {
        directionsRenderers[key].setMap(null); // 他のルートは非表示
      }
    });
  }

  function streetViewService(setLocation){
    new google.maps.StreetViewPanorama(
      document.getElementById('pano'), {
        position: setLocation,
        pov: {heading: 0, pitch: 0, zoom: 0},
        motionTracking: false,
        motionTrackingControl: false,
        fullscreenControl: false,
        linksControl: false,
      }
   );
  }


  function getRoutes(location, callback) {
    console.log("getRoutes処理開始")
    const directionsService = new google.maps.DirectionsService();

    console.log(`getRoutesでのcurrentLocationは${currentLocation}`);
    console.log(`getRoutesでのcurrentLocationのlatは${currentLocation.lat}でlngは${currentLocation.lng}`);
    console.log(`getRoutesでのsetLocationは${setLocation}`);
    console.log(`getRoutesでのsetLocationのlatは${setLocation.lat}でlngは${setLocation.lng}`);
  
    // 共通のリクエスト
    const baseRequest = {
      origin: currentLocation,
      destination: setLocation,
      travelMode: 'DRIVING',
      drivingOptions: {
        departureTime: new Date(Date.now() + 5000),  // 現在の時刻だと適切に処理されない可能性があるため現在時刻の5秒後を指定
        trafficModel: 'bestguess'
      }
    };
    
    // 高速道路を避けるリクエスト(一般道のみ)
    const avoidHighwaysRequest = {
      ...baseRequest,
      avoidHighways: true,
      avoidTolls: true
    };
    
    // 有料道路を避けるリクエスト(高速無料区間は通る)
    const avoidTollsRequest = {
      ...baseRequest,
      avoidTolls: true
    };
    
    // 有料、高速道路を回避なしリクエスト
    const noAvoidRequest = {
      ...baseRequest
    };
    
    
    const requests = [
      { request: noAvoidRequest, type: 'noAvoid' },
      { request: avoidTollsRequest, type: 'avoidTolls' },
      { request: avoidHighwaysRequest, type: 'avoidHighways' }
    ];
    
    const promises = requests.map(({ request, type }) =>
      new Promise((resolve, reject) => {
        directionsService.route(request, (response, status) => {
          if (status === 'OK') {
            const route = response.routes[0];
            let duration;
            let durationSeconds;
            if (route.legs[0].duration_in_traffic) {
              duration = route.legs[0].duration_in_traffic.text;
            } else {
              duration = route.legs[0].duration.text;
            }
            const drivingTime = duration.replace("hours", "時間").replace("mins", "分");
            const textDistance = route.legs[0].distance.text; // 距離をstring型でkmで取得
            resolve({ type, drivingTime, textDistance });
          } else {
            reject('Directions request failed' + status);
          }
        });
      })
    );
    
    return Promise.all(promises);
  }

  async function insertRouteInfoToModal(setLocation) {
    console.log("insertRouteInfoToModal処理開始")
    console.log(`insertRouteInfoToModalのsetLocationは${setLocation}`)
    const routeInfos = await getRoutes(setLocation);
    console.log("routeInfoまでの処理が終了");

    const routeContent = document.querySelector("#route-content");
    console.log(routeContent)
    routeContent.innerHTML = `
      <h2 class="text-xl">ルート情報</h2>
      <p>※実際の交通規制に従って走行してください</p>
      <ul>
        ${routeInfos.map(info => `
          <li class="py-4 text-center">
            <strong>${info.type === "noAvoid" ? "有料道路を使って行く" : info.type === "avoidTolls" ? "有料道路を回避して行く" : "下道だけで行く(125cc以下推奨)"}</strong>
            <p>予想所要時間: ${info.drivingTime}</p>
            <p>距離: ${info.textDistance}</p>
            <a href="https://www.google.com/maps/dir/?api=1&destination=${destinationLat},${destinationLng}&travelmode=driving&avoid=${info.type === "avoidHighways" ? "tolls,highways" : info.type === "avoidTolls" ? "tolls" : ""}" target="_blank" class="btn">
              このルートで行く
            </a>
          </li>
        `).join("")}
      </ul>
    `;
    console.log("insertRouteInfoToModal処理終了")
  }

  document.addEventListener("turbo:load", async () => {
    console.log("addEventListener処理開始")
    if (!mapInitialized) {
      await initMap();
    }
  
    console.log("insertRouteInfoToModal処理前")
    insertRouteInfoToModal(setLocation)

    const routeModal = document.querySelector("#route-modal");
    const routeButton = document.querySelector("#route-button");
    const closeModal = document.querySelector(".btn-circle");

    routeButton.addEventListener("click", () => {
      routeModal.showModal();
    });

    closeModal.addEventListener("click", () => {
      routeModal.close();
    });
  
    // 切り替えボタンのイベントリスナー(実装予定)
    const toggleHighwaysButton = document.getElementById("toggle-avoidHighways");
    if (toggleHighwaysButton) {
      toggleHighwaysButton.addEventListener("click", () => toggleRoute("avoidHighways"));
    }
    console.log("addEventListener処理終了")
  });


</script>
<script src="https://maps.googleapis.com/maps/api/js?key=<%= ENV["GOOGLE_MAPS_API_KEY"] %>&loading=async&libraries=geometry" data-turbo-track="reload"></script>